import pkg from "whatsapp-web.js";
import qrcode from "qrcode-terminal";
import { classifySecretaria } from "./classifier.js";

const { Client, LocalAuth } = pkg;
// üß† Estados das conversas por usu√°rio
const userStates = new Map();

// üìã Mensagens de boas-vindas aceitas
const initMsgPossibilites = [
  "oi",
  "ola",
  "ol√°",
  "bom dia",
  "boa tarde",
  "boa noite",
];

// üîç Valida√ß√µes auxiliares
const isValidCPF = (cpf) => {
  const regex = /^\d{3}\.?\d{3}\.?\d{3}-?\d{2}$/;
  return regex.test(cpf);
};

const isValidDate = (date) => {
  const regex = /^([0-2]\d|3[0-1])\/(0\d|1[0-2])\/\d{4}$/;
  return regex.test(date);
};

// üí¨ Fluxo principal do question√°rio
async function handleQuestionnaire(msg, userState, client) {
  const text = msg.body.trim().toLowerCase();

  switch (userState.step) {
    case 0:
      userState.step++;
      console.log(userState.step);
      return "Antes de come√ßar, deseja se identificar? (sim/n√£o)";
    case 1:
      if (text === "sim") {
        userState.step = 2;
        userState.identified = true;
        return "Certo! Escreva seu nome:";
      } else if (text === "n√£o" || text === "nao") {
        console.log("Entrou no modo anonimo");
        userState.step = 5;
        userState.identified = false;
        userState.name = "An√¥nimo";
        return "Tudo bem. Vamos continuar.\nPrimeiro, defina em poucas palavras o tipo do problema (ex: buraco, ilumina√ß√£o, lixo, √°rvore, sa√∫de)";
      } else {
        return "Por favor, responda apenas com 'sim' ou 'n√£o'.";
      }

    case 2:
      console.log("Entrou no case 2");
      userState.name = msg.body.trim();
      userState.step++;
      return "Digite o seu CPF:";

    case 3:
      console.log("Entrou no case 3");
      if (!isValidCPF(msg.body.trim())) {
        return "Escreva o CPF apenas em n√∫meros ou no formato 000.000.000-00 e tente novamente:";
      }
      userState.cpf = msg.body.trim();
      userState.step = 5;
      return "Perfeito! Agora, defina em poucas palavras o tipo do problema (ex: buraco, ilumina√ß√£o, lixo, √°rvore, sa√∫de)";

    case 5:
      console.log("Entrou no case 5");
      userState.problemType = msg.body.trim();
      userState.step++;
      return "Deseja informar o endere√ßo do problema? (sim/n√£o)";

    case 6:
      if (text === "sim") {
        userState.step = 7;
        return "Escreva o endere√ßo (rua, bairro, ponto de refer√™ncia...)";
      } else if (text === "n√£o" || text === "nao") {
        userState.step = 8;
        return "Quando voc√™ percebeu o problema pela primeira vez? (ex: 18/10/2025)";
      } else {
        return "Responda apenas com 'sim' ou 'n√£o'.";
      }

    case 7:
      userState.address = msg.body.trim();
      userState.step = 8;
      return "Quando voc√™ percebeu o problema pela primeira vez? (ex: 18/10/2025)";

    case 8:
      if (!isValidDate(msg.body.trim())) {
        console.log(msg.body.trim());
        return "Escreva a data no formato dia/m√™s/ano (ex: 18/10/2025).";
      }
      userState.date = msg.body.trim();
      userState.step++;
      return "Agora, por favor, descreva detalhadamente o problema em suas pr√≥prias palavras.";

    case 9:
      userState.description = msg.body.trim();
      userState.step++;
      return "Deseja enviar alguma imagem ou v√≠deo? (sim/n√£o)";

    case 10:
      if (text === "sim") {
        userState.step = 11;
        return "Envie sua imagem ou v√≠deo.";
      } else if (text === "n√£o" || text === "nao") {
        userState.step = 12;
        return "Sua demanda est√° prestes a ser enviada. Deseja mudar algo? (sim/n√£o)";
      } else {
        return "Responda apenas com 'sim' ou 'n√£o'.";
      }

    case 11:
      if (msg.hasMedia) {
        const media = await msg.downloadMedia();
        userState.media = media;
        userState.step = 12;
        return "Recebi sua m√≠dia. Deseja mudar algo antes de enviar? (sim/n√£o)";
      }
      return "Por favor, envie a imagem ou v√≠deo.";

    case 12:
      if (text === "sim") {
        userState.step = 13;
        userState.editingField = null; // novo controle
        return `O que deseja alterar?
      - Tipo do problema
      - Endere√ßo
      - Data
      - Descri√ß√£o
      - M√≠dias`;
      } else if (text === "n√£o" || text === "nao") {
        userState.step = 14;

        const secretaria = await classifySecretaria(userState.description);
        if (secretaria == "error")
          return "Um erro inesperado aconteceu, tente novamente mais tarde";

        userState.secretaria = secretaria;

        return `Sua demanda foi enviada para *${secretaria}*.\n\nResumo:
      \nüßç Nome: ${userState.name}
      \nüìã Tipo: ${userState.problemType}
      \nüìç Endere√ßo: ${userState.address || "N√£o informado"}
      \nüìÖ Data: ${userState.date}
      \nüìù Descri√ß√£o: ${userState.description}
      \nüèõÔ∏è Secretaria: ${secretaria}`;
      } else {
        return "Responda apenas com 'sim' ou 'n√£o'.";
      }

    case 13:
      // 1Ô∏è‚É£ Se ainda n√£o escolheu o campo para alterar
      if (!userState.editingField) {
        const option = text;

        if (
          [
            "tipo do problema",
            "endere√ßo",
            "data",
            "descri√ß√£o",
            "m√≠dias",
          ].includes(option)
        ) {
          userState.editingField = option;
          // Redireciona para o campo escolhido
          switch (option) {
            case "tipo do problema":
              return "Digite o novo tipo do problema:";
            case "endere√ßo":
              return "Digite o novo endere√ßo:";
            case "data":
              return "Digite a nova data (ex: 18/10/2025):";
            case "descri√ß√£o":
              return "Digite a nova descri√ß√£o:";
            case "m√≠dias":
              userState.step = 11; // volta pro envio de m√≠dia
              userState.editingField = null;
              return "Envie sua nova imagem ou v√≠deo.";
          }
        } else {
          return "Escolha uma das op√ß√µes v√°lidas: Tipo do problema, Endere√ßo, Data, Descri√ß√£o ou M√≠dias.";
        }
      }

      // 2Ô∏è‚É£ Se j√° escolheu o campo, atualiza de fato o valor
      const newValue = msg.body.trim();
      switch (userState.editingField) {
        case "tipo do problema":
          userState.problemType = newValue;
          break;
        case "endere√ßo":
          userState.address = newValue;
          break;
        case "data":
          if (!isValidDate(newValue)) {
            return "Escreva a data no formato dia/m√™s/ano (ex: 18/10/2025).";
          }
          userState.date = newValue;
          break;
        case "descri√ß√£o":
          userState.description = newValue;
          break;
      }

      // Limpa o campo e volta pro menu de confirma√ß√£o
      userState.editingField = null;
      userState.step = 12;
      return `‚úÖ ${
        userState.editingField ?? "Informa√ß√£o"
      } alterada com sucesso. Deseja mudar mais algo? (sim/n√£o)`;

    default:
      return "Digite *come√ßar* para iniciar uma nova demanda.";
  }
}

// üöÄ Inicializa o cliente do WhatsApp
const client = new Client({
  authStrategy: new LocalAuth(),
  puppeteer: { headless: true },
});

client.on("qr", (qr) => {
  qrcode.generate(qr, { small: true });
  console.log("üì± Escaneie o QR code com seu WhatsApp");
});

client.on("ready", () => {
  console.log("‚úÖ WhatsApp conectado e pronto!");
});

client.on("message", async (msg) => {
  const text = msg.body.trim().toLowerCase();

  // üî¥ Cancelar demanda a qualquer momento
  if (text === "cancelar") {
    userStates.delete(msg.from);
    await client.sendMessage(
      msg.from,
      "‚úÖ Sua demanda foi cancelada. Se quiser, pode digitar *come√ßar* para iniciar uma nova demanda."
    );
    return;
  }

  // Verifica se √© uma sauda√ß√£o
  if (initMsgPossibilites.includes(text)) {
    client.sendMessage(
      msg.from,
      "Ol√°, bem vindo ao Resolve J√°. Para come√ßar uma nova demanda escreva *come√ßar*."
    );
    return;
  }

  // Inicia o question√°rio
  if (text === "come√ßar") {
    userStates.set(msg.from, { step: 1 });
    client.sendMessage(
      msg.from,
      "Antes de come√ßar, deseja se identificar? (sim/n√£o)"
    );
    return;
  }

  // Continua o fluxo
  const userState = userStates.get(msg.from);
  if (userState) {
    const reply = await handleQuestionnaire(msg, userState, client);
    if (reply) await client.sendMessage(msg.from, reply);
  } else {
    await client.sendMessage(
      msg.from,
      "Digite *oi* para iniciar o atendimento do Resolve J√°."
    );
  }
});

client.initialize();
